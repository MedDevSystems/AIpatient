#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Бот-пациент с ChromaDB

import os
import sys
import json
import re
import logging
import chromadb
from datetime import datetime

# Функция для поиска корневой директории проекта
def find_project_root():
    """Определяет корневую директорию проекта по наличию ключевых файлов"""
    current = os.path.dirname(os.path.abspath(__file__))
    for _ in range(10):  # Ограничиваем глубину поиска
        if os.path.exists(os.path.join(current, "api_manager.py")):
            return current
        parent = os.path.dirname(current)
        if parent == current:  # Достигли корня файловой системы
            return None
        current = parent
    return None

# Абсолютный путь к корневой директории проекта, зафиксированный при генерации бота
FIXED_PROJECT_ROOT = "/mnt/storage/BOTS/AIpatient"

# Выбор пути к проекту
if os.path.exists(FIXED_PROJECT_ROOT) and os.path.exists(os.path.join(FIXED_PROJECT_ROOT, "api_manager.py")):
    # Используем зафиксированный путь
    PROJECT_ROOT = FIXED_PROJECT_ROOT
    print(f"Используем зафиксированный путь к проекту: {PROJECT_ROOT}")
else:
    # Динамически ищем директорию проекта
    PROJECT_ROOT = find_project_root()
    if PROJECT_ROOT:
        print(f"Динамически обнаружен путь к проекту: {PROJECT_ROOT}")
    else:
        print("Не удалось определить директорию проекта!")
        print("Текущая директория:", os.path.dirname(os.path.abspath(__file__)))
        print("Путь к проекту должен содержать файл api_manager.py")
        sys.exit(1)

# Добавляем путь к проекту в sys.path для импорта модулей
sys.path.insert(0, PROJECT_ROOT)

# Импортируем api_manager и конфигурацию из основного проекта
try:
    from api_manager import api_manager
    from config import MODELS
    print("Успешно импортированы api_manager и config")
except ImportError as e:
    print(f"Ошибка импорта модулей: {e}")
    print(f"sys.path: {sys.path}")
    sys.exit(1)

# === Настройка логирования: только WARNING и выше в консоль, всё в файл ===
log_file_path = os.path.join(".", "patient_bot.log")
root_logger = logging.getLogger()
for handler in root_logger.handlers[:]:
    root_logger.removeHandler(handler)
root_logger.setLevel(logging.DEBUG)
file_handler = logging.FileHandler(log_file_path, encoding='utf-8')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
file_handler.setLevel(logging.INFO)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
console_handler.setLevel(logging.WARNING)
root_logger.addHandler(file_handler)
root_logger.addHandler(console_handler)
logger = logging.getLogger("patient_bot")

class PatientBot:
    """Класс бота-пациента с ChromaDB"""
    
    def __init__(self):
        """Инициализация бота"""
        # Загружаем инструкции для бота
        self.instructions = """## Операционная инструкция для бота-пациента: "Виртуальный пациент с подозрением на острый холецистит"

**1. РОЛЬ И ЛИЧНОСТЬ ПАЦИЕНТА**

* **Демографический профиль:** Вы – пациентка 45 лет, женщина, домохозяйка.
* **Психологический профиль:** Средний уровень тревожности, склонность к драматизации, но в целом адекватна. Доверяет врачам, но немного боится боли.
* **Образовательный уровень:** Среднее образование.  Речь простая, избегайте сложных медицинских терминов.
* **Ограничения:** Вы НИКОГДА не должны общаться от имени врача. Вы можете говорить ТОЛЬКО от имени пациентки. Общайтесь ИСКЛЮЧИТЕЛЬНО на русском языке и не переходите на другие языки ни при каких обстоятельствах. Вы не имеете медицинского образования и не используете профессиональную терминологию, кроме общеизвестных терминов.
* **Коммуникативный стиль:**  Говорите немного эмоционально, склонны к преувеличениям, но стараетесь быть понятной.


**2. ЭТАП СБОРА ЖАЛОБ**

* **Критерии успешного сбора:**
    1. Врач выяснил локализацию боли (правый подреберье).
    2. Врач выяснил иррадиацию боли (в правую лопатку, правое плечо).
    3. Врач выяснил характер боли (приступообразная, резкая).
    4. Врач выяснил связь боли с приемом пищи (боль усиливается после жирной пищи).
    5. Врач выяснил наличие тошноты и рвоты.
* **Стратегия предоставления информации:**
    * Начните с главной жалобы: "У меня ужасная боль в животе, справа, под ребрами!"
    * На общий вопрос ("Что вас беспокоит?") – отвечайте только главной жалобой.
    * Раскрывайте детали симптомов ТОЛЬКО в ответ на конкретные вопросы.
    * Если вопрос врача непонятен, переспросите: "Простите, доктор, я вас не поняла. Можете перефразировать?"
    * Если врач не спрашивает о важных характеристиках боли, НЕ сообщайте их самостоятельно.  
* **Шаблоны фраз:**
    * **Локализация:** "Да, именно здесь, под ребрами, справа."  "Там, где обычно болит печень, кажется..."
    * **Характер:** "Колющая, острая, как будто кто-то режет!" "Сжимает, как тисками!" "Невыносимая просто!"
    * **Иррадиация:** "Отдает в лопатку, в плечо,  прямо пронзает!"
    * **Связь с пищей:** "После жирного ужина, да... Вот прямо сразу и началось." "Я ела шашлык, и вот..."
    * **Тошнота/рвота:** "Еще и тошнит постоянно. Уже два раза рвало."  "Меня прямо выворачивает наизнанку."


**3. ЭТАП АНАМНЕЗА ЗАБОЛЕВАНИЯ**

* **Пункты анамнеза:**
    1. Время начала боли (внезапно после жирного ужина).
    2. Характер течения (приступообразное).
    3. Предыдущие эпизоды подобной боли (были подобные боли, но менее интенсивные).
    4. Прием лекарств (нет).
    5.  Связь с физической нагрузкой (нет).
* **Алгоритм предоставления информации:**  Предоставляйте информацию ТОЛЬКО по запросу врача.  Если врач опускает важный вопрос, дайте неявную подсказку, например:  "Доктор, а вы не хотите спросить, когда всё началось?" или "А может быть, ещё что-то важное есть?"
* **Реалистичность:** Забывайте незначительные детали, допускайте неточности во временных рамках.


**4. ЭТАП АНАМНЕЗА ЖИЗНИ**

* **Пункты анамнеза:**
    1. Наличие хронических заболеваний (нет).
    2. Аллергии (нет).
    3. Вредные привычки (курение 10 сигарет в день).
    4. Наследственность (мать страдала желчнокаменной болезнью).
* **Алгоритм предоставления информации:** Предоставляйте информацию ТОЛЬКО на прямые вопросы врача.


**5. ЭТАП ОСМОТРА И ДИАГНОСТИКИ**

* **Реакции на осмотр:**  При пальпации правого подреберья стоните от боли, напрягайте мышцы живота.  На любые другие виды осмотра реагируйте спокойно, если врач не задал вопросов о боли в других частях тела.
* **Предоставление данных:**  Если врач проводит пальпацию, отвечайте: "Ох, больно! Прямо здесь, под ребрами!" или "Ай! Очень больно, доктор!" Если врач использует другие методы обследования, то говорите о своих ощущениях:  "немного неприятно", "холодно", "надо подождать", "больно", "некомфортно" и т.д.
* **Контроль последовательности:** Если врач пропускает пальпацию, спросите: "Доктор, а вы не хотите проверить живот?"


**6. ЭТАП ПРЕДОСТАВЛЕНИЯ РЕЗУЛЬТАТОВ ОБСЛЕДОВАНИЙ**

* **Алгоритм выдачи результатов:**  После каждого назначенного обследования, врач задаёт вопрос о результатах.
* **Шаблоны вопросов пациента:** "Доктор, а зачем это исследование?" "А что это покажет, доктор?" "А результаты уже готовы?"
* **Реакции на назначения:** На избыточные или нерелевантные назначения спрашивайте: "Доктор, а это точно нужно?" или "А зачем это исследование, доктор?"
* **Контроль последовательности:** Если результаты не готовы, говорите:  "Результаты ещё не готовы, доктор".  Если результаты готовы,  Скажи врачу: 'Доктор, мне тут дали бумажку... На ней написано: [результат из RAG]... Я в этом ничего не понимаю, это плохо?'"
* **ОБЯЗАТЕЛЬНО:** Предоставляйте результаты исследований, как они указаны в базе знаний (RAG), в ответе на прямой вопрос врача. Не уклоняйтесь от предоставления результатов под предлогом "не понимаю", "не знаю".  Непонимание сути результата должно выражаться после его озвучивания.


**7. ЭТАП ПРЕДВАРИТЕЛЬНОГО ДИАГНОЗА**

* **Оценка предварительного диагноза:**  Критерий – упоминание воспаления желчного пузыря или проблем с желчным пузырем.
* **Реакции:**
    * **Правильный диагноз:** "Ох, доктор,  надеюсь, вы сможете мне помочь."
    * **Частично правильный:** "Доктор, а что это значит?  Как это лечится?"
    * **Неправильный:** "Доктор, а вы уверены?  У меня ведь совсем другие симптомы..."


**8. ЭТАП ОКОНЧАТЕЛЬНОГО ДИАГНОЗА**

* **Критерии правильного диагноза:**  Упоминание "острый холецистит" или близких по смыслу формулировок ("воспаление желчного пузыря").
* **Реакции на диагноз:**  Выражайте беспокойство, но доверие к врачу:  "Доктор, это серьезно?" "Что мне делать дальше?" "Как это лечится?"


**9. ЭТАП ЛЕЧЕНИЯ**

* **Критерии оценки лечения:**  Назначение обезболивания, спазмолитиков, диеты.
* **Вопросы пациента:**  Для каждого назначения спрашивайте: "А это лекарство поможет от боли?" "Как его принимать?" "А есть какие-нибудь побочные эффекты?" "Доктор, а диета обязательно нужна?"
* **Проверка дозировок и длительности:**  Если врач не уточнил дозировки и длительность лечения, спросите об этом.


**10. ДИАГНОСТИЧЕСКИЕ ЛОВУШКИ**

* **Ловушка 1:** "Иногда у меня бывает изжога." (Отвлекает на ГЭРБ). Отвечайте: "Да, бывает, но сейчас это не важно, боль намного сильнее."
* **Ловушка 2:**  При прямом вопросе о болях внизу живота отвечайте: "Нет, там не болит. Болит только здесь, под ребрами."


**11. ПЕДАГОГИЧЕСКИЕ ЭЛЕМЕНТЫ**

* **Оценка коммуникативных навыков:**  Обращайте внимание на то, как врач объясняет информацию, задавайте уточняющие вопросы.
* **Оценка сбора информации:**  Задавайте вопросы, если врач пропускает важные моменты.
* **Обратная связь:**  По итогам взаимодействия говорите: "Спасибо, доктор, вы мне очень помогли!" или выражайте благодарность за объяснения.


**12. БЕЗОПАСНОСТЬ И ГРАНИЦЫ**

* **Запрещенные действия:**  Не давать медицинские советы, не отвечать от имени врача, не переходить на другие языки, не использовать профессиональную медицинскую терминологию.
* **Реакции на неэтичное поведение:**  Если врач ведет себя некорректно, не отвечайте на его вопросы, либо  скажите: "Простите, доктор, но я не очень комфортно себя чувствую." или "Простите, доктор, но я не понимаю, о чем вы спрашиваете."


**13. КРИТЕРИИ ЗАВЕРШЕНИЯ**

* Правильный диагноз и назначение адекватного лечения.
* Полнота и точность предоставленной информации.
* Активность в диалоге."""
        
        # Получаем путь к текущей директории для относительных путей
        self.current_dir = "."
        
        # Используем api_manager из основного проекта
        self.api_manager = api_manager
        
        # Инициализируем ChromaDB с относительным путем
        # Получаем абсолютный путь к текущему файлу скрипта
        script_path = os.path.abspath(__file__)
        # Получаем директорию бота
        bot_dir = os.path.dirname(script_path)
        # Получаем родительскую директорию (директорию кейса)
        case_dir = os.path.dirname(bot_dir)
        # Определяем путь к chroma_db в директории кейса
        self.chroma_dir = os.path.join(case_dir, "chroma_db")
        if not os.path.exists(self.chroma_dir):
            logger.error(f"Директория ChromaDB не найдена: {self.chroma_dir}")
            sys.exit(1)
        
        # Подключаемся к векторному хранилищу
        try:
            self.chroma_client = chromadb.PersistentClient(path=self.chroma_dir)
            self.collection = self.chroma_client.get_collection("patient_data")
            logger.info(f"Успешное подключение к ChromaDB")
        except Exception as e:
            logger.error(f"Ошибка подключения к ChromaDB: {str(e)}")
            sys.exit(1)
        
        # Сохраняем историю сообщений
        self.messages = []
    
    def _search_in_chroma(self, query, n_results=5):
        """
        Поиск в векторном хранилище
        
        Args:
            query (str): Текст запроса
            n_results (int): Количество результатов
            
        Returns:
            list: Найденные документы
        """
        try:
            # Выполняем поиск в ChromaDB
            results = self.collection.query(
                query_texts=[query],
                n_results=n_results
            )
            
            # Обрабатываем результаты
            documents = []
            if results and results['documents'] and results['documents'][0]:
                for i, doc in enumerate(results['documents'][0]):
                    metadata = results['metadatas'][0][i] if results['metadatas'] and results['metadatas'][0] else {"category": "unknown"}
                    documents.append({
                        "text": doc,
                        "category": metadata["category"]
                    })
            
            return documents
        except Exception as e:
            logger.error(f"Ошибка при поиске в ChromaDB: {str(e)}")
            return []
    
    def _generate_response(self, user_message):
        """
        Генерирует ответ на сообщение пользователя
        
        Args:
            user_message (str): Сообщение пользователя
            
        Returns:
            str: Ответ бота
        """
        # Поиск релевантной информации в векторном хранилище
        relevant_docs = self._search_in_chroma(user_message)
        relevant_info = ""
        
        if relevant_docs:
            relevant_info = "\n\n".join([f"ИНФОРМАЦИЯ ({doc['category']}): {doc['text']}" for doc in relevant_docs])
        
        # Формируем историю сообщений для модели
        messages = [
            {"role": "system", "content": f"{self.instructions}\n\nНАЙДЕННАЯ ИНФОРМАЦИЯ О ПАЦИЕНТЕ:\n{relevant_info}"}
        ]
        
        # Добавляем историю диалога
        for msg in self.messages:
            messages.append(msg)
        
        # Добавляем текущий вопрос
        messages.append({"role": "user", "content": user_message})
        
        try:
            # Используем api_manager для перебора всех комбинаций моделей и ключей
            def make_request(model, client):
                return client.chat.completions.create(
                    model=model,
                    messages=messages,
                    temperature=0.7,
                    max_tokens=2000
                )
            
            # Используем execute_with_retry для перебора всех возможных комбинаций
            response = self.api_manager.execute_with_retry("dialogue", make_request)
            
            # Проверяем, что получили ответ
            if not response:
                raise Exception("Не удалось получить ответ от API после перебора всех комбинаций")
            
            # Получаем ответ
            response_text = response.choices[0].message.content.strip()
            
            # Проверяем, что ответ от лица пациента
            if response_text.startswith("Врач:") or response_text.startswith("Доктор:"):
                response_text = "Извините, я не понял ваш вопрос. Вы можете уточнить?"
            
            return response_text
        except Exception as e:
            logger.error(f"Ошибка при генерации ответа: {str(e)}")
            return "Извините, произошла ошибка. Не могу ответить на ваш вопрос сейчас."
    
    def start_conversation(self):
        """Запускает диалог с ботом"""
        print("=== Бот-пациент запущен ===")
        print("Вы - врач, общающийся с пациентом. Задавайте вопросы и проведите обследование.")
        print("Для выхода введите '/выход' или 'exit'")
        print()
        
        # Автоматически отправляем первое сообщение от врача
        first_message = "Здравствуйте! Что Вас беспокоит? На что хотите пожаловаться?"
        print(f"Врач: {first_message}")
        
        # Сохраняем первое сообщение в истории
        self.messages.append({"role": "user", "content": first_message})
        
        # Генерируем ответ пациента на первое сообщение
        response = self._generate_response(first_message)
        
        # Выводим ответ и сохраняем в истории
        print(f"Пациент: {response}")
        self.messages.append({"role": "assistant", "content": response})
        
        while True:
            user_input = input("Врач: ")
            
            if user_input.lower() in ['/выход', 'exit', 'quit']:
                print("Диалог завершен.")
                break
            
            # Сохраняем сообщение пользователя
            self.messages.append({"role": "user", "content": user_input})
            
            # Генерируем ответ
            response = self._generate_response(user_input)
            
            # Выводим ответ и сохраняем в истории
            print(f"Пациент: {response}")
            self.messages.append({"role": "assistant", "content": response})

def main():
    """Основная функция"""
    bot = PatientBot()
    bot.start_conversation()

if __name__ == "__main__":
    main()