# Система создания виртуальных пациентов для медицинского образования

## Описание проекта

Система создания виртуальных пациентов — это программный комплекс, предназначенный для создания интерактивных учебных материалов для медицинского образования. Система позволяет преподавателям (врачам) создавать реалистичные виртуальные клинические случаи, с которыми студенты-медики могут взаимодействовать, развивая свои навыки диагностики, сбора анамнеза и назначения лечения.

## Принцип работы

Процесс создания и использования виртуальных пациентов состоит из следующих этапов:

1. **Сбор информации о клиническом случае** — врач-преподаватель взаимодействует с ботом-куратором (агентом), который методично собирает все необходимые данные о клиническом случае посредством структурированного диалога.

2. **Генерация данных пациента** — на основе собранной информации система автоматически генерирует два ключевых документа:
   - **Инструкции для бота-пациента** — правила поведения и реагирования бота на вопросы студента
   - **Фактические данные пациента** — клинические сведения о пациенте (демография, жалобы, анамнез, результаты обследований и т.д.)

3. **Улучшение данных с помощью арбитра** — сгенерированные документы проверяются и улучшаются специальным модулем-арбитром для обеспечения клинической достоверности и педагогической ценности.

4. **Создание векторного хранилища** — фактические данные индексируются в векторное хранилище (ChromaDB) для эффективного поиска и извлечения информации.

5. **Генерация бота-пациента** — создаётся исполняемый скрипт бота-пациента, который использует векторное хранилище для поиска информации и инструкции для формирования ответов.

6. **Взаимодействие студента с ботом-пациентом** — студент-медик "ведет прием" виртуального пациента, задавая вопросы, проводя виртуальный осмотр, назначая обследования и лечение.

## Компоненты системы

### Основные модули

- **DrMistral.py** — основной модуль системы, содержащий:
  - `CuratorAgent` — бот-куратор для сбора информации от врача-преподавателя
  - `DocumentArbitrator` — арбитр для улучшения сгенерированных документов

- **patient_bot_generator.py** — модуль для создания бота-пациента, включающий:
  - Функционал для создания векторного хранилища (ChromaDB)
  - Генерацию исполняемого скрипта бота-пациента

- **api_manager.py** — менеджер API ключей и моделей, реализующий:
  - Паттерн "барабан револьвера" для API ключей (попеременное использование)
  - Механизм фолбэка для моделей (автоматическое переключение при ошибках)

- **config.py** — конфигурационный файл с API ключами и настройками моделей

- **bot_instructions.py** — файл с инструкциями и промптами для различных компонентов системы

### Структура данных

Каждый клинический случай создается в отдельной директории со следующей структурой:

```
cases/
  └── case_YYYYMMDD_HHMMSS/    # Уникальный ID случая
      ├── dialogue.json        # История диалога врача с куратором
      ├── bot_instructions.txt # Финальные инструкции для бота
      ├── factual_data.txt     # Финальные фактические данные
      ├── chroma_db/           # Векторное хранилище
      └── bot/                 # Директория с ботом-пациентом
          ├── run_vector_bot.py  # Скрипт запуска бота
          └── ...
```

## Технологии

- **Языковые модели**: Gemini 1.5, Gemini 2.0/2.5 (Google AI)
- **Векторное хранилище**: ChromaDB с многоязычной моделью эмбеддингов
- **RAG (Retrieval-Augmented Generation)**: Для поиска и предоставления релевантной информации в ответах бота-пациента

## Принцип работы бота-пациента

Бот-пациент работает по технологии RAG (Retrieval-Augmented Generation), объединяя векторное хранилище с языковой моделью:

1. **Индексация данных**
   - Фактические данные пациента разбиваются на фрагменты
   - Каждый фрагмент преобразуется в векторное представление (эмбеддинги)
   - Эмбеддинги сохраняются в базе данных ChromaDB

2. **Обработка вопросов студента**
   - Вопрос студента преобразуется в векторное представление
   - Система ищет в векторном хранилище фрагменты, семантически близкие к вопросу
   - Найденные фрагменты извлекаются и включаются в контекст запроса к языковой модели

3. **Формирование ответа**
   - Языковая модель (Gemini) получает:
     * Инструкции по поведению бота-пациента
     * Найденные фрагменты фактических данных
     * Вопрос студента
     * Историю диалога
   - Модель формирует ответ, соблюдая характер и знания пациента
   - Ответ направляется студенту

4. **Соблюдение инструкций**
   - Бот следует заложенным инструкциям, которые определяют:
     * Характер и поведение пациента
     * Порядок раскрытия информации
     * Реакции на различные типы вопросов
     * Эмоциональные состояния
   - Это обеспечивает реалистичное взаимодействие и педагогическую ценность

5. **Обучающие элементы**
   - Бот содержит специальные "диагностические ловушки"
   - Он может умалчивать важные симптомы, если о них не спросили
   - Отвечает корректно только на правильно сформулированные вопросы
   - Может выражать беспокойство или страх при определенных темах

Использование RAG позволяет боту давать клинически точные ответы на основе заложенных данных, не искажая и не выдумывая информацию, что критически важно для медицинского образования.

## Установка и настройка

### Требования
- Python 3.8 или выше
- Установленные зависимости (см. requirements.txt)
- API ключи для Google AI (Gemini)

### Установка зависимостей

1. Клонируйте репозиторий:
   ```
   git clone <url-репозитория>
   cd AIpatient
   ```

2. Установите зависимости с помощью pip:
   ```
   pip install -r requirements.txt
   ```

3. Убедитесь, что установка зависимостей для ChromaDB прошла успешно. В случае проблем с установкой sentence-transformers, установите их отдельно:
   ```
   pip install sentence-transformers
   ```

### Настройка API ключей

1. Создайте файл `.env` в корневой директории проекта
2. Добавьте API ключи в следующем формате:
   ```
   GOOGLE_API_KEYS=key1,key2,key3
   ```

## Использование системы

### Создание клинического случая

1. Запустите бота-куратора:
   ```
   python DrMistral.py
   ```
   
   Для режима отладки с выводом потока ответов модели:
   ```
   python DrMistral.py --debug
   ```

2. Следуйте инструкциям бота-куратора для описания клинического случая.

3. Введите команду `/генерация` когда завершите описание случая.

4. Система автоматически:
   - Сгенерирует инструкции и фактические данные
   - Улучшит их с помощью арбитра
   - Создаст векторное хранилище
   - Сгенерирует бота-пациента

### Запуск бота-пациента

1. После успешной генерации система предложит команду для запуска бота:
   ```
   python cases/case_YYYYMMDD_HHMMSS/bot/run_vector_bot.py
   ```

2. Запустите бота-пациента и начните взаимодействие, имитирующее прием пациента.

## Особенности реализации

- **Надежность API запросов**: Система автоматически перебирает комбинации моделей и API ключей при ошибках
- **Арбитраж данных**: Двухступенчатый процесс генерации с арбитром для повышения качества данных
- **Векторное хранилище**: Эффективный поиск информации для обеспечения реалистичности ответов бота-пациента
- **Настраиваемые инструкции**: Детальные инструкции для бота определяют его поведение и педагогическую ценность

## Логирование

Система ведет подробные логи:
- Журнал диалога с ботом-куратором в директории `logs/`
- Логи работы бота-пациента в файле `patient_bot.log`

## Устранение неполадок

- **Проблемы с API**: Проверьте правильность API ключей в файле `.env`
- **Ошибки создания векторного хранилища**: Убедитесь, что установлены все зависимости для ChromaDB
- **Проблемы запуска бота**: Проверьте, что все необходимые файлы созданы в директории случая 